class TakeHoursController < ApplicationController

helper_method :hora_libre

#mostrar bloques de atención de los doctores
  def index
	##para saber si busca por especialidad o por nombre
	if !params[:id].present? #si no está id, se busca por nombre

		#buscar el doctor con los nombres ingresados
		@doctor = User.find_by_sql("select * from users u inner join doctors d on d.user_id = u.user_id where u.user_NAMES = '#{params[:nombre]}' and u.user_LASTNAME1 = '#{params[:paterno]}' and u.user_LASTNAME2 = '#{params[:materno]}'")
		
		if @doctor.count == 0
			redirect_to search_medics_index_path
			return
		end

		#bloques de atención disponibles del doctor
		@abs = AttentionBlock.find_by_sql("select * from attention_blocks ab inner join doctors d on d.doctor_id = ab.doctor_id inner join users u on u.user_id = d.user_id where u.user_NAMES = '#{params[:nombre]}' and ab.AB_AVAILABLE = true")
	else
		#se busca por id
		@doctor = User.find_by_sql("select * from users where users.user_id = '#{params[:id]}'")

		#bloques de atención disponibles del doctor
		@abs = AttentionBlock.find_by_sql("select * from attention_blocks ab inner join doctors d on d.doctor_id = ab.doctor_id inner join users u on u.user_id = d.user_id where u.user_id = '#{params[:id]}' and ab.AB_AVAILABLE = true")
	end

	#especialidades de los bloques
	@realdoctor = Doctor.find_by_sql("select * from doctors d inner join users u on u.user_id = d.user_id where u.user_id = '#{@doctor[0].user_id}'")
	@specs = Specialty.find_by_sql("select * from specialties")
	@est = Establishment.find_by_sql("select * from establishments e where e.EST_ID = '#{@realdoctor[0].EST_ID}'")
	@comuna = Commune.find_by_sql("select * from communes where commune_id = '#{@est[0].commune_id}'")
	@ciudad = City.find_by_sql("select * from cities where city_id = '#{@comuna[0].city_id}'")
  end


#buscar por especialidad
  def show
	#buscar especialidad
	@spec = Specialty.find_by_sql("select * from specialties where SPEC_NAME = '#{params[:specialty][:SPEC_NAME]}'")
	
	#buscar doctores con esa especialidad
	@doctors = User.find_by_sql("select * from users inner join doctors d on d.user_id = users.user_id inner join doctor_specialties ds on ds.doctor_id = d.doctor_id where ds.SPEC_ID = '#{@spec[0].SPEC_ID}'")	

  end

  #cuando se quiere agendar una hora
  def show2
	if user_signed_in?
		#buscar al paciente
		@paciente = Patient.find_by_sql("select * from patients where patients.user_id = '#{current_user.user_id}'")

		#ver si hora está creada
		@hr =  ReservedHour.find_by_sql("select * from reserved_hours rh where rh.AB_ID = '#{params[:ab_id]}'")
		
		#si existe, ver si su hora empiza a la misma hora, si es 			así, está tomada
		#hr = horas dentro del mismo bloque
		if @hr != nil #si existe
		  @hr.each do |f|
       		    if (f.RH_START_TIME.to_s == params[:hora_inicio] && f.RH_STATE == true)
			flash[:alert] = "Hora ya está tomada"
		 	redirect_to search_index_path	
		    end
		  end		
		end

		#doctor
		@doctor = User.find_by_sql("select * from users where user_id = '#{params[:user_id]}'")

		#bloque de atención
		@ab = AttentionBlock.find_by_sql("select * from attention_blocks ab where ab.AB_ID = '#{params[:ab_id]}'")

		#horas inicio y fin
		@hora_inicio = params[:hora_inicio]
		@hora_fin = params[:hora_fin]

		#especialidad de la hora
		@spec = Specialty.find_by_sql("select * from specialties where specialties.SPEC_ID = '#{@ab[0].SPEC_ID}'")

	else
		flash[:alert] = "Debes haber iniciado sesión para reservar una hora"
		redirect_to new_user_session_path
	end
  end

  def show3
	##crear hora confirmada
	ReservedHour.crear(params[:patient_id], params[:ab_id], params[:hora_inicio], params[:hora_fin])
  end

  def message1
  	##crear hora confirmada
	ReservedHour.crear(params[:patient_id], params[:ab_id], params[:hora_inicio], params[:hora_fin])
  end

  def hora_libre(ab_id, hora_inicio)
	hr =  ReservedHour.find_by_sql("select * from reserved_hours rh where rh.AB_ID = '#{ab_id}'")
		
	#si existe, ver si su hora empieza a la misma hora, si es 			así, está tomada
	#hr = horas dentro del mismo bloque
	if hr != nil #si existe
	  hr.each do |f|
       	    if (f.RH_START_TIME.to_s == hora_inicio.to_s && f.RH_STATE == true)
		return false
	    end
	  end
	  return true
	else
	  #no hay horas agendadas en ese bloque, por lo que se puede tomar
	  return true		
	end
  end

end
